@using EnvironmentalEconomy.Models
@model IEnumerable<ResultDbModel>
@{
    /**/

    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_IndexLayout.cshtml";
}
<style>

    /* Set the size of the div element that contains the map */
    #map {
        width: 100%; /* The width is the width of the web page */
        height: 650px; /* The height is 400 pixels */
    }
</style>

<head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js"></script>
    @Scripts.Render("~/Scripts/Map.js")
</head>

<!--The div element for the map -->
<div id="map"></div>
<form>
    <div class="form-group">
        <input id="txtSearch" class="form-control" type="text" placeholder="Search For Loction">
    </div>
</form>
<button onclick="PanCurrentLocation()" value="Current Location"> Location</button>


<script>
    function SendScope(circle) {
        coo = GetCoor(circle.getCenter().toString(), circle.getRadius());
        var MeanTemp = 0;
        var MeanHumd = 0;
        var MeanQual = 0;
        var count = 0;
        @foreach(var item in Model)
        {
            foreach(var res in item.Results)
            {
                <text>
                    var dist = distance(coo.latitude, coo.longitude, @res.Latitude, @res.Longtitude);
            if (dist < coo.radius) {
                        MeanTemp += @res.Temperature;
                    MeanHumd += @res.Humidity;
                    MeanQual += @res.AirQuality;
                    count += 1;
                }
                    </text>
            }
        }

        MeanTemp /= count;
        MeanHumd /= count;
        MeanQual /= count;

        var str = '<div id="content">' +
            '<div id="siteNotice">' +
            '</div>' +
            '<h2 id="firstHeading" class="firstHeading">Description</h2>' +
            '<div id="bodyContent">' +
            '<p>Mean Tempurature: <b>' + MeanTemp + '</b></p>' +
            '<p>Mean Humidity: <b>' + MeanHumd + '</b></p>' +
            '<p>Mean Air Quality: <b>' + MeanQual + '</b></p>' +
            '</div>' +
            '<div align="center"><input type="button" onclick="GetDetails()" class="btn btn-primary" value="View Details"/></div>' +
            '</div>';
        if (infowindow != null) {
            infowindow.setMap(null);
        }
        infowindow = new google.maps.InfoWindow({
            content: str,
            position: circle.getCenter()
        });
        infowindow.open(map);
    }

    function getPoints() {
    var points = [];
    var offset = 100;
    @foreach(var item in Model)
    {
        foreach(var res in item.Results)
        {
            <text>points.push({
                location: new google.maps.LatLng(@res.Latitude, @res.Longtitude),
                weight: @res.AirQuality * 0.1
                    })</text>
        }
    }
    return points;
    }

    function GetDetails() {
    coo = GetCoor(circle.getCenter().toString(), circle.getRadius());
    window.location.href = "@Url.Action("LocationDetails", "Home")?Latitude=" + coo.latitude +
        "&Longitude=" + coo.longitude +
        "&Radius=" + coo.radius;
    console.log("Getting details");
    }
</script>

<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBoQ6pmUSRHQR2jaOIE66oHHJs9QSPL3vg&callback=initMap&libraries=places,visualization">
</script>

