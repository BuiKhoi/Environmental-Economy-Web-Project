@using EnvironmentalEconomy.Models
@model IEnumerable<ResultDbModel>
@{
    Layout = "~/Views/Shared/_IndexLayout.cshtml";
}
<style>
    html, body{
        height: 100%;
    }
    /* Set the size of the div element that contains the map */
    #map {
        position: relative;
        margin: 0 0 0 0;
        width: 100%;
        height: 40rem;
    }

    #txtSearch {
        width: 80%;
        align-self: center;
        margin-top: 0.7rem;
        height: 2rem;
        padding: 1rem;
        background-color: white;
        border-top-color: rgb(206, 212, 218);
        border-top-style: solid;
        border-top-width: 1px;
        border-right-color: rgb(206, 212, 218);
        border-right-style: solid;
        border-right-width: 1px;
        border-bottom-color: rgb(206, 212, 218);
        border-bottom-style: solid;
        border-bottom-width: 1px;
        border-left-color: rgb(206, 212, 218);
        border-left-style: solid;
        border-left-width: 1px;
        border-image-source: initial;
        border-image-slice: initial;
        border-image-width: initial;
        border-image-outset: initial;
        border-image-repeat: initial;
        border-radius: 0.5rem;
    }

    b {
        margin-top: 10px;
    }

    .btn {
        margin: 0px;
    }

    .btn-primary {
        margin: 0px;
    }

    #btnSelect {
        max-width: 100px;
        -webkit-box-sizing: border-box; /* Safari, other WebKit */
        -moz-box-sizing: border-box; /* Firefox, other Gecko */
        box-sizing: border-box; /* Opera/IE 8+ */
        width: 100%;
        margin: 0 auto;
        font-family: inherit;
        font-weight: 400;
        font-size: 1rem;
        border-top-color: transparent;
        border-top-style: solid;
        border-top-width: 1px;
        border-right-color: transparent;
        border-right-style: solid;
        border-right-width: 1px;
        border-bottom-color: transparent;
        border-bottom-style: solid;
        border-bottom-width: 1px;
        border-left-color: transparent;
        border-left-style: solid;
        border-left-width: 1px;
        border-image-source: initial;
        border-image-slice: initial;
        border-image-width: initial;
        border-image-outset: initial;
        border-image-repeat: initial;
        padding-top: 0.375rem;
        padding-right: 0.75rem;
        padding-bottom: 0.375rem;
        padding-left: 0.75rem;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
        border-bottom-right-radius: 0.25rem;
        border-bottom-left-radius: 0.25rem;
    }
</style>

<!--The div element for the map -->
<div style="display: flex; flex-flow: column; height:100%">
    <div style="height:5rem"></div>
    <div id="map" style="flex-grow: 1"></div>
</div>
<form>
    <div>
        <input id="txtSearch" type="text" placeholder="Search For Location">
    </div>
</form>


<script>
    var InitLocation = { lat: 16.062034, lng: 108.236130 };
    var Polylines = [];
    var PolyWindows = [];
    var Qualities = [];

    EditNavBarFocus();

    function EditNavBarFocus() {
        document.getElementById("alMap").className = "action-link active";
    }

    function SendScope(circle) {
        coo = GetCoor(circle.getCenter().toString(), circle.getRadius());
        var MeanTemp = 0;
        var MeanHumd = 0;
        var MeanQual = 0;
        var count = 0;
        @foreach(var item in Model)
        {
            foreach(var res in item.Results)
            {
                <text>
                    var dist = distance(coo.latitude, coo.longitude, @res.Latitude, @res.Longitude);
            if (dist < coo.radius) {
                        MeanTemp += @res.Temperature;
                    MeanHumd += @res.Humidity;
                    MeanQual += @res.AirQuality;
                    count += 1;
                }
                    </text>
            }
        }

        MeanTemp /= count;
        MeanHumd /= count;
        MeanQual /= count;

        var str = '<div id="content">' +
            '<div id="siteNotice">' +
            '</div>' +
            '<h2 id="firstHeading" class="firstHeading">Description</h2>' +
            '<div id="bodyContent">' +
            '<p>Mean Tempurature: <b>' + MeanTemp.toFixed(2) + ' C</b></p>' +
            '<p>Mean Humidity: <b>' + MeanHumd.toFixed(2) + ' %</b></p>' +
            '<p>Mean Air Quality: <b>' + MeanQual.toFixed(2) + ' %</b></p>' +
            '</div>' +
            '<div align="center"><input type="button" onclick="GetDetails()" class="btn btn-primary" value="Get Route Guide"/></div>' +
            '</div>';
        if (infowindow != null) {
            infowindow.setMap(null);
        }
        infowindow = new google.maps.InfoWindow({
            content: str,
            position: circle.getCenter()
        });
        infowindow.open(map);
    }

    function getPoints() {
    var points = [];
    var offset = 100;
    @foreach(var item in Model)
    {
        foreach(var res in item.Results)
        {
            <text>points.push({
                location: new google.maps.LatLng(@res.Latitude, @res.Longitude),
                weight: @res.AirQuality * 0.1
        })</text>
        }
    }
        //console.log(points[0]);
    return points;
    }

    function GetDetails() {
    @*coo = GetCoor(circle.getCenter().toString(), circle.getRadius());
    window.location.href = "@Url.Action("LocationDetails", "Home")?Latitude=" + coo.latitude +
        "&Longitude=" + coo.longitude +
        "&Radius=" + coo.radius;
    console.log("Getting details");*@
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(getDir);
        }

        function getDir(position) {
            //console.log("Latitude: " + position.coords.latitude + "\nLongitude: " + position.coords.longitude);
            var origin = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            var request = {
                origin: origin,
                destination: circle.getCenter(),
                travelMode: 'DRIVING',
                provideRouteAlternatives: true,
                unitSystem: google.maps.UnitSystem.METRIC
            }
            var directionsService = new google.maps.DirectionsService();
            var directionsDisplay = new google.maps.DirectionsRenderer();
            directionsService.route(request, function (response, status) {
                if (status == 'OK') {
                    CleanRoutes();
                    infowindow.setMap(null);
                    directionsDisplay.setDirections(response);
                    Routes = directionsDisplay.directions.routes;
                    DrawRoute(Routes);
                    GetRouteQuality(Routes);
                    PutInfoWindow(Routes);
                }
            });
        }

        function DrawRoute(routes) {
            var count = routes.length;

            //This is the first chosen route
            var polyline = new google.maps.Polyline({
                path: routes[0].overview_path,
                geodesic: true,
                strokeColor: '#97e532',
                strokeOpacity: 1.0,
                strokeWeight: 10,
                map: map,
                zIndex: 1
            });
            Polylines.push(polyline);

            //The remaining routes
            for (var i = 1; i < count; i++) {
                var polyline = new google.maps.Polyline({
                    path: routes[i].overview_path,
                    geodesic: true,
                    strokeColor: '#787d84',
                    strokeOpacity: 1.0,
                    strokeWeight: 10,
                    map: map,
                    zIndex: 0
                });
                Polylines.push(polyline);
            }

            Polylines.forEach(function (polyline) {
                polyline.addListener('click', function (e) {
                    Polylines.forEach(function (polyline) {
                        polyline.setOptions({ strokeColor: '#787d84', zIndex: 0 });
                    })
                    this.setOptions({ strokeColor: '#97e532', zIndex: 1 });
                })
            })
        }

        function PutInfoWindow(routes) {
            var len = routes.length;
            var paths = [];
            routes.forEach(function (route) {
                paths.push(route.overview_path);
            })
            for (var i = 0; i < len; i++) {
                var looking = true;
                while (looking) {
                    var index = Math.floor(Math.random() * (paths[i].length - 1)) + 1;
                    var value = paths[i][index];
                    exited = false;
                    for (var j = 0; j < len; j++) {
                        if (j != i) {
                            if (paths[j].includes(value)) {
                                exited = true;
                                break;
                            }
                        }
                    }
                    if (!exited) {
                        var idx = Math.random();
                        idx = idx < 0.5 ? -1 : 1;
                        DrawInfoWindowForPolyline(value, paths[i][index + idx], routes[i], i);
                        looking = false;
                    }
                }
            }
        }

        function DrawInfoWindowForPolyline(start, stop, route, number) {
            var lat1 = degrees_to_radians(start.lat());
            var lat2 = degrees_to_radians(stop.lat());
            var lon1 = degrees_to_radians(start.lng());
            var lon2 = degrees_to_radians(stop.lng());
            var lat3 = radians_to_degrees((lat1 + lat2) / 2);
            var lon3 = radians_to_degrees((lon1 + lon2) / 2);
            var middle = new google.maps.LatLng(lat3, lon3);

            var str = '<div>' +
                '<div id = \"contents\">' +
                '<p><img src=\"https://img.icons8.com/metro/1600/car.png\" style=\"width:20px;height:20px;\">&nbsp;' +
                '<b>' + route.legs[0].duration.text + '</b></p>' +
                '<p>' + route.legs[0].distance.text + '</p>' +
                '<p> Air Quality: ' + parseFloat(Qualities[number].qual).toFixed(2) + ' %</p>' +
                '<input id="btnSelect" style="' + GetButtonWarningColor(Qualities[number].qual) + '" type=\"button\" value=\"Select\" onclick=\"FocusRoute(' + number +')\"">' +
                '</div >' +
                '</div >';

            var iw = new google.maps.InfoWindow({
                content: str,
                position: middle
            });
            iw.open(map);
            PolyWindows.push(iw);
        }

        function GetRouteQuality(routes) {
            routes.forEach(function (route) {
                var path = route.overview_path;
                var temp = 0;
                var humd = 0;
                var qual = 0;
                var count = 0;
                for (var i = 0; i < path.length - 1; i++) {
                    var result = GetMeanQuality(path[i], path[i + 1]);
                    //console.log("At " + i + " of " + (path.length-1) + " result: " + result);
                    temp = result.temp;
                    humd = result.humd;
                    qual = result.qual;
                    if ((!isNaN(result.temp)) && (!isNaN(result.humd)) && (!isNaN(result.qual))) {
                        count += 1;
                    }
                }
                temp /= count;
                humd /= count;
                qual /= count;
                console.log("Tempurature: " + temp + " | Humidity: " + humd + " | Quality: " + qual);
                Qualities.push({ temp: temp, humd: humd, qual: qual })
            })
        }
    }

    function FocusRoute(number) {
        Polylines.forEach(function (polyline) {
            polyline.setOptions({ strokeColor: '#787d84', zIndex: 0 });
        })
        Polylines[number].setOptions({ strokeColor: '#97e532', zIndex: 1 });
    }

    function CleanRoutes() {
        if (Polylines.length != 0) {
            Polylines.forEach(function (polyline) {
                polyline.setMap(null);
            })
        }

        if (PolyWindows.length != 0) {
            PolyWindows.forEach(function (window) {
                window.setMap(null);
            })
        }
        PolyWindows = [];
        Polylines = [];
    }

    function GetMeanQuality(start_pos, end_pos) {
        //console.log("Getting quality from " + start_pos.lat() + ", " + start_pos.lng() + "to " + end_pos.lat() + ", " + end_pos.lng());

        var mean_temp = 0;
        var mean_humd = 0;
        var mean_qual = 0;
        var res_count = 0;

        var radius = 14;
        //Get the distance between 2 points
        var dist = distance(start_pos.lat(), start_pos.lng(), end_pos.lat(), end_pos.lng());
        var count = parseInt((dist / radius));

        //Get the quality of the counted values
        for (var i = 0; i < count; i++) {
            var lat3 = (start_pos.lat() * (count - i) + end_pos.lat() * i) / count;
            var lon3 = (start_pos.lng() * (count - i) + end_pos.lng() * i) / count;

            //Loop the resulting model
            @foreach(var item in Model)
            {
                foreach(var res in item.Results)
                {
                <text>
                    dist = distance(lat3, lon3, @res.Latitude, @res.Longitude);
                    if (dist < radius) {;
                        mean_temp += @res.Temperature;
                        mean_humd += @res.Humidity;
                        mean_qual += @res.AirQuality;
                        res_count += 1;
                    }
                </text>
                }
            }
        }

        mean_temp /= res_count;
        mean_humd /= res_count;
        mean_qual /= res_count;

        var rtr = { temp: mean_temp, humd: mean_humd, qual: mean_qual }
        return rtr;
    }

    function GetButtonWarningColor(quality) {
        if (quality > 80) {
            return "background-color: red; color: white;";
        } else if (quality > 50) {
            return "background-color: yellow; color: black;";
        } else {
            return "background-color: green; color: white;";
        }
    }
</script>

<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->

@Scripts.Render("~/Scripts/Map.js")

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBoQ6pmUSRHQR2jaOIE66oHHJs9QSPL3vg&callback=initMap&libraries=places,visualization,directions">
</script>

