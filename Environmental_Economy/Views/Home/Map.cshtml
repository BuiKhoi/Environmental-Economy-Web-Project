@using EnvironmentalEconomy.Models
@model IEnumerable<ResultDbModel>
@{
    /**/

    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_IndexLayout.cshtml";
}
<style>
    html, body {
        height: 100%;
        margin: 0;
    }
    /* Set the size of the div element that contains the map */
    #map {
        margin: auto;
        width: 100%;
    }

    .full-height {
        height: 87%;
    }

    #txtSearch {
        width: 83%;
        align-self: center;
        margin-top: 5px;
        background-color: white;
        border-top-color: rgb(206, 212, 218);
        border-top-style: solid;
        border-top-width: 1px;
        border-right-color: rgb(206, 212, 218);
        border-right-style: solid;
        border-right-width: 1px;
        border-bottom-color: rgb(206, 212, 218);
        border-bottom-style: solid;
        border-bottom-width: 1px;
        border-left-color: rgb(206, 212, 218);
        border-left-style: solid;
        border-left-width: 1px;
        border-image-source: initial;
        border-image-slice: initial;
        border-image-width: initial;
        border-image-outset: initial;
        border-image-repeat: initial;
        border-radius: 1.5rem;
    }
</style>

<head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js"></script>
    @Scripts.Render("~/Scripts/Map.js")
</head>

<!--The div element for the map -->
<div id="map" class="full-height"></div>
<form>
    <div class="form-group">
        <input id="txtSearch" type="text" placeholder="Search For Loction">
    </div>
</form>
@*<button onclick="PanCurrentLocation()" value="Current Location"> Location</button>*@


<script>
    var InitLocation = { lat: 16.062034, lng: 108.236130 };
    var Polylines = [];
    var routes;
    function SendScope(circle) {
        coo = GetCoor(circle.getCenter().toString(), circle.getRadius());
        var MeanTemp = 0;
        var MeanHumd = 0;
        var MeanQual = 0;
        var count = 0;
        @foreach(var item in Model)
        {
            foreach(var res in item.Results)
            {
                <text>
                    var dist = distance(coo.latitude, coo.longitude, @res.Latitude, @res.Longtitude);
            if (dist < coo.radius) {
                        MeanTemp += @res.Temperature;
                    MeanHumd += @res.Humidity;
                    MeanQual += @res.AirQuality;
                    count += 1;
                }
                    </text>
            }
        }

        MeanTemp /= count;
        MeanHumd /= count;
        MeanQual /= count;

        var str = '<div id="content">' +
            '<div id="siteNotice">' +
            '</div>' +
            '<h2 id="firstHeading" class="firstHeading">Description</h2>' +
            '<div id="bodyContent">' +
            '<p>Mean Tempurature: <b>' + MeanTemp + '</b></p>' +
            '<p>Mean Humidity: <b>' + MeanHumd + '</b></p>' +
            '<p>Mean Air Quality: <b>' + MeanQual + '</b></p>' +
            '</div>' +
            '<div align="center"><input type="button" onclick="GetDetails()" class="btn btn-primary" value="Get Route Guide"/></div>' +
            '</div>';
        if (infowindow != null) {
            infowindow.setMap(null);
        }
        infowindow = new google.maps.InfoWindow({
            content: str,
            position: circle.getCenter()
        });
        infowindow.open(map);
    }

    function getPoints() {
    var points = [];
    var offset = 100;
    @foreach(var item in Model)
    {
        foreach(var res in item.Results)
        {
            <text>points.push({
                location: new google.maps.LatLng(@res.Latitude, @res.Longtitude),
                weight: @res.AirQuality * 0.1
                    })</text>
        }
    }
    return points;
    }

    function GetDetails() {
    @*coo = GetCoor(circle.getCenter().toString(), circle.getRadius());
    window.location.href = "@Url.Action("LocationDetails", "Home")?Latitude=" + coo.latitude +
        "&Longitude=" + coo.longitude +
        "&Radius=" + coo.radius;
    console.log("Getting details");*@
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(getDir);
        }

        function getDir(position) {
            //console.log("Latitude: " + position.coords.latitude + "\nLongitude: " + position.coords.longitude);
            var origin = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            var request = {
                origin: origin,
                destination: circle.getCenter(),
                travelMode: 'DRIVING',
                provideRouteAlternatives: true,
                unitSystem: google.maps.UnitSystem.METRIC
            }
            var directionsService = new google.maps.DirectionsService();
            var directionsDisplay = new google.maps.DirectionsRenderer();
            directionsService.route(request, function (response, status) {
                if (status == 'OK') {
                    directionsDisplay.setDirections(response);
                    infowindow.setMap(null);
                    DrawRoute(directionsDisplay.directions.routes);
                }
            });
        }

        function DrawRoute(routes) {
            var count = routes.length;
            CleanRoutes();
            //The remaining routes
            for (var i = 1; i < count; i++) {
                var polyline = new google.maps.Polyline({
                    path: routes[i].overview_path,
                    geodesic: true,
                    strokeColor: '#787d84',
                    strokeOpacity: 1.0,
                    strokeWeight: 10,
                    map: map
                });
                Polylines.push(polyline);
            }

            //This is the first chosen route
            var polyline = new google.maps.Polyline({
                path: routes[0].overview_path,
                geodesic: true,
                strokeColor: '#97e532',
                strokeOpacity: 1.0,
                strokeWeight: 10,
                map: map
            });
            Polylines.push(polyline);

            Polylines.forEach(function (polyline) {
                polyline.addListener('click', function (e) {
                    Polylines.forEach(function (polyline) {
                        polyline.setOptions({ strokeColor: '#787d84', zIndex: 50 });
                    })
                    this.setOptions({ strokeColor: '#97e532', zIndex: 100 });
                    this.setMap(null);
                    this.setMap(map);
                })
            })
        }
    }
</script>

<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBoQ6pmUSRHQR2jaOIE66oHHJs9QSPL3vg&callback=initMap&libraries=places,visualization,directions">
</script>

